{"version":3,"sources":["types/Errors.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/users.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Errors","PostsList","posts","openingPostId","togglePost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","newCommentsData","setNewCommentsData","addComment","isCommentAdding","typeOfError","useState","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","htmlFor","name","placeholder","value","onChange","event","currentTarget","email","body","preventDefault","Adding","toUpperCase","slice","toLowerCase","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getUsers","getPosts","userId","getComments","postId","deleteComment","PostDetails","user","isFormShown","showForm","setTypeOfError","commentsList","setCommentsList","areCommentsLoading","setCommentsLoading","setCommentAdding","removingCommentsId","setRemovingCommentsId","a","None","commentsFromServer","Comments","comment","currComments","removeComment","comments","filter","Deleting","useEffect","loadComments","timer","window","clearTimeout","length","Fragment","href","UserSelector","users","currUser","selectUser","isListShown","setListShown","toggleList","handleUserClick","onBlur","role","App","setUsers","setCurrUser","postsList","setPostsList","isPostsLoading","setPostsLoading","currPost","setCurrPost","setFormShown","usersFromServer","postFromServer","Posts","getUserList","loadUserPosts","currentPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49fd94f8.chunk.js","sourcesContent":["export enum Errors {\n  Posts = 'SOMETHING WENT WRONG!',\n  Comments = 'SOMETHING WENT WRONG!',\n  Adding = 'UNABLE TO ADD COMMENT',\n  Deleting = 'UNABLE TO DELETE COMMENT',\n  None = '',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  openingPostId: number | null;\n  togglePost: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, openingPostId, togglePost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': openingPostId !== post.id },\n                )}\n                onClick={() => togglePost(post)}\n              >\n                {openingPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\nimport { Errors } from '../types/Errors';\n\ntype Props = {\n  newCommentsData: CommentData;\n  setNewCommentsData: (data: CommentData) => void;\n  addComment: () => void;\n  isCommentAdding: boolean;\n  typeOfError: Errors;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  newCommentsData,\n  setNewCommentsData,\n  addComment,\n  isCommentAdding,\n  typeOfError,\n}) => {\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n\n  const inputCommentsName = (event: React.FormEvent<HTMLInputElement>) => {\n    const name = event.currentTarget.value;\n\n    setNewCommentsData({ ...newCommentsData, name });\n    setNameError(false);\n  };\n\n  const inputCommentsEmail = (event: React.FormEvent<HTMLInputElement>) => {\n    const email = event.currentTarget.value;\n\n    setNewCommentsData({ ...newCommentsData, email });\n    setEmailError(false);\n  };\n\n  const inputCommentsBody = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const body = event.currentTarget.value;\n\n    setNewCommentsData({ ...newCommentsData, body });\n    setBodyError(false);\n  };\n\n  const handleAddClick = () => (event: React.FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (newCommentsData.name !== ''\n    && newCommentsData.email !== ''\n    && newCommentsData.body !== '') {\n      addComment();\n      setNewCommentsData({ ...newCommentsData, body: '' });\n    } else {\n      if (newCommentsData.name === '') {\n        setNameError(true);\n      }\n\n      if (newCommentsData.email === '') {\n        setEmailError(true);\n      }\n\n      if (newCommentsData.body === '') {\n        setBodyError(true);\n      }\n    }\n  };\n\n  const handleClearClick = () => {\n    setNewCommentsData({\n      ...newCommentsData,\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input', { 'is-danger': nameError },\n            )}\n            value={newCommentsData.name}\n            onChange={inputCommentsName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input', { 'is-danger': emailError },\n            )}\n            value={newCommentsData.email}\n            onChange={inputCommentsEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', { 'is-danger': bodyError },\n            )}\n            value={newCommentsData.body}\n            onChange={inputCommentsBody}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentAdding },\n            )}\n            onClick={handleAddClick()}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearClick}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      {typeOfError === Errors.Adding && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {typeOfError[0].toUpperCase() + typeOfError.slice(1).toLowerCase()}\n        </p>\n      )}\n    </form>\n  );\n};\n","import { CommentData } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: CommentData | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(\n    url: string, data: CommentData | null,\n  ) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number | null = null) => {\n  if (userId) {\n    return client.get<Post[]>(`/posts?userId=${userId}`);\n  }\n\n  return null;\n};\n\nexport const getComments = (postId: number | null = null) => {\n  if (postId) {\n    return client.get<Comment[]>(`/comments?postId=${postId}`);\n  }\n\n  return null;\n};\n\nexport const postComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Errors } from '../types/Errors';\n\nimport { getComments, postComment, deleteComment } from '../api/users';\n\ntype Props = {\n  post: Post | null;\n  user: User | null;\n  isFormShown: boolean;\n  typeOfError: Errors;\n  setTypeOfError: (data: Errors) => void;\n  showForm: () => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  user,\n  isFormShown,\n  showForm,\n  typeOfError,\n  setTypeOfError,\n}) => {\n  const [commentsList, setCommentsList] = useState<Comment[] | null>(null);\n  const [areCommentsLoading, setCommentsLoading] = useState(false);\n  const [isCommentAdding, setCommentAdding] = useState(false);\n  const [\n    removingCommentsId, setRemovingCommentsId,\n  ] = useState<number | null>(null);\n  const [newCommentsData, setNewCommentsData] = useState<CommentData>(\n    {\n      postId: post?.id || null,\n      name: '',\n      email: '',\n      body: '',\n    },\n  );\n\n  async function loadComments() {\n    setTypeOfError(Errors.None);\n    try {\n      setCommentsLoading(true);\n      const commentsFromServer = await getComments(user?.id);\n\n      setCommentsList(commentsFromServer);\n    } catch (error) {\n      setTypeOfError(Errors.Comments);\n    } finally {\n      setCommentsLoading(false);\n    }\n  }\n\n  const addComment = async () => {\n    setCommentAdding(false);\n    setTypeOfError(Errors.None);\n\n    try {\n      setCommentAdding(true);\n\n      const comment = await postComment(newCommentsData);\n\n      setCommentsList(currComments => {\n        if (currComments) {\n          return [...currComments, comment];\n        }\n\n        return [comment];\n      });\n    } catch (error) {\n      setTypeOfError(Errors.Adding);\n    } finally {\n      setCommentAdding(false);\n    }\n  };\n\n  const removeComment = async (id: number) => {\n    setTypeOfError(Errors.None);\n    setRemovingCommentsId(null);\n    try {\n      await deleteComment(id);\n\n      setCommentsList(comments => {\n        return comments?.filter(comment => comment.id !== id) || null;\n      });\n    } catch (error) {\n      setTypeOfError(Errors.Deleting);\n      setRemovingCommentsId(id);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setNewCommentsData(\n      {\n        postId: post?.id || null,\n        name: '',\n        email: '',\n        body: '',\n      },\n    );\n  }, [post?.id]);\n\n  useEffect(() => {\n    if (typeOfError === Errors.Adding || typeOfError === Errors.Deleting) {\n      const timer = window.setTimeout(() => {\n        setTypeOfError(Errors.None);\n        setRemovingCommentsId(null);\n      }, 3000);\n\n      return () => {\n        window.clearTimeout(timer);\n      };\n    }\n\n    return () => {};\n  }, [typeOfError]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #{post?.id}: {post?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {areCommentsLoading && <Loader />}\n\n          {typeOfError === Errors.Comments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {typeOfError[0].toUpperCase()\n              + typeOfError.slice(1).toLowerCase()}\n            </div>\n          )}\n\n          {commentsList?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!commentsList && commentsList?.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {commentsList?.map(comment => (\n                <React.Fragment key={comment.id}>\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n\n                  {typeOfError === Errors.Deleting\n                  && removingCommentsId === comment.id && (\n                    <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                      {typeOfError[0].toUpperCase()\n                      + typeOfError.slice(1).toLowerCase()}\n                    </p>\n                  )}\n                </React.Fragment>\n              ))}\n            </>\n          )}\n\n          {!isFormShown && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={showForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            newCommentsData={newCommentsData}\n            setNewCommentsData={setNewCommentsData}\n            addComment={addComment}\n            isCommentAdding={isCommentAdding}\n            typeOfError={typeOfError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null;\n  currUser: User | null;\n  selectUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, currUser, selectUser,\n}) => {\n  const [isListShown, setListShown] = useState(false);\n\n  const toggleList = () => {\n    setListShown(!isListShown);\n  };\n\n  const hideList = () => {\n    setTimeout(() => {\n      setListShown(false);\n    }, 100);\n  };\n\n  const handleUserClick = (user: User) => () => {\n    selectUser(user);\n    toggleList();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleList}\n          onBlur={hideList}\n        >\n          {!currUser && <span>Choose a user</span>}\n          <span>{currUser?.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isListShown && (\n        <ul className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          {users?.map(user => (\n            <li key={user.id} className=\"dropdown-content\">\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': currUser?.id === user.id },\n                )}\n                onClick={handleUserClick(user)}\n              >\n                {user.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport {\n  getUsers, getPosts,\n} from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Errors } from './types/Errors';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [currUser, setCurrUser] = useState<User | null>(null);\n  const [postsList, setPostsList] = useState<Post[] | null>(null);\n  const [typeOfError, setTypeOfError] = useState<Errors>(Errors.None);\n  const [isPostsLoading, setPostsLoading] = useState(false);\n  const [currPost, setCurrPost] = useState<Post | null>(null);\n  const [isFormShown, setFormShown] = useState(false);\n\n  async function getUserList() {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer);\n  }\n\n  const selectUser = (user: User) => {\n    setCurrPost(null);\n    setFormShown(false);\n    setCurrUser(user);\n  };\n\n  async function loadUserPosts() {\n    setTypeOfError(Errors.None);\n    try {\n      setPostsLoading(true);\n      const postFromServer = await getPosts(currUser?.id);\n\n      setPostsList(postFromServer);\n    } catch (error) {\n      setTypeOfError(Errors.Posts);\n    } finally {\n      setPostsLoading(false);\n    }\n  }\n\n  const togglePost = (post: Post) => {\n    setFormShown(false);\n    setCurrPost(currentPost => {\n      if (currentPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n  };\n\n  const showForm = () => {\n    setFormShown(true);\n  };\n\n  useEffect(() => {\n    getUserList();\n  }, []);\n\n  useEffect(() => {\n    loadUserPosts();\n  }, [currUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  currUser={currUser}\n                  selectUser={selectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!currUser && !isPostsLoading && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {typeOfError === Errors.Posts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {typeOfError[0].toUpperCase()\n                    + typeOfError.slice(1).toLowerCase()}\n                  </div>\n                )}\n\n                {postsList?.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {!!postsList && postsList?.length > 0 && (\n                  <PostsList\n                    posts={postsList}\n                    openingPostId={currPost?.id || null}\n                    togglePost={togglePost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!currPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                post={currPost}\n                user={currUser}\n                typeOfError={typeOfError}\n                setTypeOfError={setTypeOfError}\n                isFormShown={isFormShown}\n                showForm={showForm}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}