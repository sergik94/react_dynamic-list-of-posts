{"version":3,"sources":["types/Errors.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/users.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Errors","PostsList","posts","openingPostId","togglePost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","newCommentsData","setNewCommentsData","addComment","isCommentAdding","setTypeOfError","typeOfError","htmlFor","name","placeholder","Form","value","onChange","event","currentTarget","email","body","None","preventDefault","Adding","toUpperCase","slice","toLowerCase","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getUsers","getPosts","userId","getComments","postId","deleteComment","PostDetails","isFormShown","showForm","useState","commentsList","setCommentsList","areCommentsLoading","setCommentsLoading","setCommentAdding","removingCommentsId","setRemovingCommentsId","a","commentsFromServer","Comments","comment","currComments","removeComment","comments","filter","Deleting","useEffect","loadComments","timer","window","clearTimeout","length","Fragment","href","UserSelector","users","currUser","handleUserSelect","isListShown","setListShown","ulRef","useRef","toggleList","handleUserClick","user","handleClick","useCallback","target","node","current","Node","contains","document","addEventListener","removeEventListener","role","ref","App","setUsers","setCurrUser","postsList","setPostsList","isPostsLoading","setPostsLoading","currPost","setCurrPost","setFormShown","usersFromServer","postFromServer","Posts","getUserList","loadUserPosts","currentPost","ReactDOM","render","getElementById"],"mappings":"sMAAYA,E,0GCUCC,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,cAAeC,EADkB,EAClBA,WADkB,OAGxC,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBACA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAAkB,UAAQ,OAA1B,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IACT,SACA,UACA,CAAE,WAAYR,IAAkBI,EAAKC,KAEvCI,QAAS,kBAAMR,EAAWG,IAR5B,SAUGJ,IAAkBI,EAAKC,GAAK,QAAU,aAlBpCD,EAAKC,gB,eCxBXK,G,MAAS,kBACpB,qBAAKR,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,yB,SFJPL,K,8BAAAA,E,iCAAAA,E,+BAAAA,E,oCAAAA,E,yBAAAA,E,SAAAA,M,KGaL,IAAMc,EAAkC,SAAC,GAOzC,IANLC,EAMI,EANJA,gBACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,eACAC,EACI,EADJA,YAoDA,OACE,uBAAM,UAAQ,iBAAd,UACE,sBAAKf,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQgB,QAAQ,sBAAjC,yBAIA,sBAAKhB,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLY,KAAK,OACLd,GAAG,sBACHe,YAAY,eACZlB,UAAWM,IACT,QACA,CACE,YAAaS,IAAgBpB,EAAOwB,MACV,KAAzBT,EAAgBO,OAGrBG,MAAOV,EAAgBO,KACvBI,SAvEgB,SAACC,GACzB,IAAML,EAAOK,EAAMC,cAAcH,MAEjCT,EAAmB,2BAAKD,GAAN,IAAuBO,UAEX,KAA1BP,EAAgBc,OACQ,KAAzBd,EAAgBe,MACjBX,EAAenB,EAAO+B,SAmElB,sBAAM1B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGbe,IAAgBpB,EAAOwB,MAAiC,KAAzBT,EAAgBO,MAC/C,sBACEjB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBe,IAAgBpB,EAAOwB,MAAiC,KAAzBT,EAAgBO,MAC9C,mBAAGjB,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQgB,QAAQ,uBAAjC,0BAIA,sBAAKhB,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLY,KAAK,QACLd,GAAG,uBACHe,YAAY,iBACZlB,UAAWM,IACT,QACA,CACE,YAAaS,IAAgBpB,EAAOwB,MACT,KAA1BT,EAAgBc,QAGrBJ,MAAOV,EAAgBc,MACvBH,SAvGiB,SAACC,GAC1B,IAAME,EAAQF,EAAMC,cAAcH,MAElCT,EAAmB,2BAAKD,GAAN,IAAuBc,WAEZ,KAAzBd,EAAgBO,MACQ,KAAzBP,EAAgBe,MACjBX,EAAenB,EAAO+B,SAmGlB,sBAAM1B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGde,IAAgBpB,EAAOwB,MAAkC,KAA1BT,EAAgBc,OAC9C,sBACExB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBe,IAAgBpB,EAAOwB,MAAkC,KAA1BT,EAAgBc,OAC9C,mBAAGxB,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQgB,QAAQ,eAAjC,0BAIA,qBAAKhB,UAAU,UAAf,SACE,0BACEG,GAAG,eACHc,KAAK,OACLC,YAAY,oBACZlB,UAAWM,IACT,WACA,CACE,YAAaS,IAAgBpB,EAAOwB,MACV,KAAzBT,EAAgBe,OAGrBL,MAAOV,EAAgBe,KACvBJ,SAtIgB,SAACC,GACzB,IAAMG,EAAOH,EAAMC,cAAcH,MAEjCT,EAAmB,2BAAKD,GAAN,IAAuBe,UAEX,KAA1Bf,EAAgBc,OACQ,KAAzBd,EAAgBO,MACjBH,EAAenB,EAAO+B,WAmInBX,IAAgBpB,EAAOwB,MAAiC,KAAzBT,EAAgBe,MAC9C,mBAAGzB,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IACT,SACA,UACA,CAAE,aAAcO,IAElBN,QA/Ia,SAACe,GACtBA,EAAMK,iBAENf,KAqIM,mBAaF,qBAAKZ,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QApJe,WACvBI,EAAmB,2BACdD,GADa,IAEhBO,KAAM,GACNO,MAAO,GACPC,KAAM,MAGRX,EAAenB,EAAO+B,OAyIhB,wBASHX,IAAgBpB,EAAOiC,QACtB,mBAAG5B,UAAU,iBAAiB,UAAQ,eAAtC,SACGe,EAAY,GAAGc,cAAgBd,EAAYe,MAAM,GAAGC,oBCtNzDC,EAAW,oCAEjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAMxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADe,KAErBC,EAAuB,CAAEF,UAS/B,OAPIC,IACFC,EAAQjB,KAAOkB,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAIbZ,EAAK,KACTa,MAAK,kBAAMC,MAAMf,EAAWO,EAAKG,MACjCI,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIX,GAAJ,OAAoBD,EAAWC,IADzBW,EAEL,SACJX,EAAaE,GADT,OAEDH,EAAWC,EAAK,OAAQE,IAJlBS,EAKH,SAACX,GAAD,OAAiBD,EAAQC,EAAK,WC/B3BY,EAAW,WACtB,OAAOD,EAAmB,WAGfE,EAAW,WAAmC,IAAlCC,EAAiC,uDAAT,KAC/C,OAAIA,EACKH,EAAA,wBAAoCG,IAGtC,MAGIC,EAAc,WAAmC,IAAlCC,EAAiC,uDAAT,KAClD,OAAIA,EACKL,EAAA,2BAA0CK,IAG5C,MAOIC,EAAgB,SAACrD,GAC5B,OAAO+C,EAAA,oBAA2B/C,KCXvBsD,EAA+B,SAAC,GAMtC,IALLvD,EAKI,EALJA,KACAwD,EAII,EAJJA,YACAC,EAGI,EAHJA,SACA5C,EAEI,EAFJA,YACAD,EACI,EADJA,eAEA,EAAwC8C,mBAA2B,MAAnE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAiDF,oBAAS,GAA1D,mBAAOG,EAAP,KAA2BC,EAA3B,KACA,EAA4CJ,oBAAS,GAArD,mBAAO/C,EAAP,KAAwBoD,EAAxB,KACA,EAEIL,mBAAwB,MAF5B,mBACEM,EADF,KACsBC,EADtB,KAGA,EAA8CP,mBAC5C,CACEL,QAAY,OAAJrD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,KAAM,KACpBc,KAAM,GACNO,MAAO,GACPC,KAAM,KALV,mBAAOf,EAAP,KAAwBC,EAAxB,KAPI,4CAgBJ,4BAAAyD,EAAA,6DACEtD,EAAenB,EAAO+B,MADxB,SAGIsC,GAAmB,GAHvB,SAIqCV,EAAW,OAACpD,QAAD,IAACA,OAAD,EAACA,EAAMC,IAJvD,OAIUkE,EAJV,OAMIP,EAAgBO,GANpB,gDAQIvD,EAAenB,EAAO2E,UAR1B,yBAUIN,GAAmB,GAVvB,6EAhBI,sBA8BJ,IAAMpD,EAAU,uCAAG,4BAAAwD,EAAA,yDACjBH,GAAiB,GACjBnD,EAAenB,EAAO+B,MAEO,KAAzBhB,EAAgBO,MACS,KAA1BP,EAAgBc,OACS,KAAzBd,EAAgBe,KANF,uBAOfX,EAAenB,EAAOwB,MAPP,0CAaf8C,GAAiB,GAbF,SD7BZf,EAAqB,YC4CUxC,GAfnB,OAeT6D,EAfS,OAiBfT,GAAgB,SAAAU,GACd,OAAIA,EACI,GAAN,mBAAWA,GAAX,CAAyBD,IAGpB,CAACA,MAGV5D,EAAmB,2BAAKD,GAAN,IAAuBe,KAAM,MAzBhC,kDA2BfX,EAAenB,EAAOiC,QA3BP,yBA6BfqC,GAAiB,GA7BF,6EAAH,qDAiCVQ,EAAa,uCAAG,WAAOtE,GAAP,SAAAiE,EAAA,6DACpBtD,EAAenB,EAAO+B,MACtByC,EAAsB,MAFF,kBAIZX,EAAcrD,GAJF,OAMlB2D,GAAgB,SAAAY,GACd,OAAe,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUC,QAAO,SAAAJ,GAAO,OAAIA,EAAQpE,KAAOA,OAAO,QAPzC,gDAUlBW,EAAenB,EAAOiF,UACtBT,EAAsBhE,GAXJ,yDAAH,sDA4CnB,OA7BA0E,qBAAU,YA9EN,mCA+EFC,GACAnE,EACE,CACE4C,QAAY,OAAJrD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,KAAM,KACpBc,KAAM,GACNO,MAAO,GACPC,KAAM,OAGT,QAACvB,QAAD,IAACA,OAAD,EAACA,EAAMC,KAEV0E,qBAAU,WACR,IAAIE,EAAQ,EASZ,OAPIhE,IAAgBpB,EAAOiC,QAAUb,IAAgBpB,EAAOiF,WAC1DG,EAAQC,OAAO3C,YAAW,WACxBvB,EAAenB,EAAO+B,MACtByC,EAAsB,QACrB,MAGE,WACDY,GACFC,OAAOC,aAAaF,MAGvB,CAAChE,EAAaD,EAAgBqD,IAG/B,qBAAKnE,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAI,UAAQ,YAAZ,qBACIE,QADJ,IACIA,OADJ,EACIA,EAAMC,GADV,YACgBD,QADhB,IACgBA,OADhB,EACgBA,EAAME,SAGtB,mBAAG,UAAQ,WAAX,gBACGF,QADH,IACGA,OADH,EACGA,EAAMuB,UAIX,sBAAKzB,UAAU,QAAf,UACG+D,GAAsB,cAAC,EAAD,IAEtBhD,IAAgBpB,EAAO2E,UACtB,qBAAKtE,UAAU,yBAAyB,UAAQ,gBAAhD,SACGe,EAAY,GAAGc,cACdd,EAAYe,MAAM,GAAGC,gBAID,KAAb,OAAZ8B,QAAY,IAAZA,OAAA,EAAAA,EAAcqB,SACb,mBAAGlF,UAAU,aAAa,UAAQ,oBAAlC,+BAKC6D,IAA4B,OAAZA,QAAY,IAAZA,OAAA,EAAAA,EAAcqB,QAAS,GACxC,qCACE,mBAAGlF,UAAU,aAAb,uBADF,OAGG6D,QAHH,IAGGA,OAHH,EAGGA,EAAc5D,KAAI,SAAAsE,GAAO,OACxB,eAAC,IAAMY,SAAP,WACE,0BACEnF,UAAU,mBACV,UAAQ,UAFV,UAIE,sBAAKA,UAAU,iBAAf,UACE,mBAAGoF,KAAI,iBAAYb,EAAQ/C,OAAS,UAAQ,gBAA5C,SACG+C,EAAQtD,OAEX,wBACE,UAAQ,gBACRZ,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAMkE,EAAcF,EAAQpE,KALvC,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGuE,EAAQ9C,UAIZV,IAAgBpB,EAAOiF,UACrBV,IAAuBK,EAAQpE,IAChC,mBAAGH,UAAU,iBAAiB,UAAQ,eAAtC,SACGe,EAAY,GAAGc,cACdd,EAAYe,MAAM,GAAGC,kBA7BRwC,EAAQpE,WAqCjCuD,GACA,wBACE,UAAQ,qBACRrD,KAAK,SACLL,UAAU,iBACVO,QAASoD,EAJX,gCAWHD,GACC,cAAC,EAAD,CACEhD,gBAAiBA,EACjBC,mBAAoBA,EACpBC,WAAYA,EACZC,gBAAiBA,EACjBC,eAAgBA,EAChBC,YAAaA,UClNZsE,EAAgC,SAAC,GAEvC,IADLC,EACI,EADJA,MAAOC,EACH,EADGA,SAAUC,EACb,EADaA,iBAEjB,EAAoC5B,oBAAS,GAA7C,mBAAO6B,EAAP,KAAoBC,EAApB,KACMC,EAAQC,iBAAgC,MAExCC,EAAa,WACjBH,GAAcD,IAGVK,EAAkB,SAACC,GAAD,OAAgB,WACtCP,EAAiBO,GACjBF,MAGIG,EAAcC,uBAAY,YAA6B,IAA1BC,EAAyB,EAAzBA,OAC3BC,EAAI,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAOS,QAEhBD,GAAQD,aAAkBG,OAASF,EAAKG,SAASJ,IACnDR,GAAa,KAEd,CAACD,EAAaE,IAUjB,OARAd,qBAAU,WAGR,OAFA0B,SAASC,iBAAiB,YAAaR,GAEhC,WACLO,SAASE,oBAAoB,YAAaT,MAE3C,CAACA,IAGF,sBACE,UAAQ,eACRhG,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAASsF,EALX,WAOIN,GAAY,mDACXA,GAAY,+BAAOA,EAAStE,OAE/B,sBAAMjB,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDyF,GACC,oBACEzF,UAAU,gBACVG,GAAG,gBACHuG,KAAK,OACLC,IAAKhB,EAJP,gBAMGL,QANH,IAMGA,OANH,EAMGA,EAAOrF,KAAI,SAAA8F,GAAI,OACd,oBAAkB/F,UAAU,mBAA5B,SACE,mBACEoF,KAAI,gBAAWW,EAAK5F,IACpBH,UAAWM,IACT,gBACA,CAAE,aAAqB,OAARiF,QAAQ,IAARA,OAAA,EAAAA,EAAUpF,MAAO4F,EAAK5F,KAEvCI,QAASuF,EAAgBC,GAN3B,SAQGA,EAAK9E,QATD8E,EAAK5F,aCvDbyG,EAAgB,WAC3B,MAA0BhD,mBAAwB,MAAlD,mBAAO0B,EAAP,KAAcuB,EAAd,KACA,EAAgCjD,mBAAsB,MAAtD,mBAAO2B,EAAP,KAAiBuB,EAAjB,KACA,EAAkClD,mBAAwB,MAA1D,mBAAOmD,EAAP,KAAkBC,EAAlB,KACA,EAAsCpD,mBAAiBjE,EAAO+B,MAA9D,mBAAOX,EAAP,KAAoBD,EAApB,KACA,EAA0C8C,oBAAS,GAAnD,mBAAOqD,EAAP,KAAuBC,EAAvB,KACA,EAAgCtD,mBAAsB,MAAtD,mBAAOuD,EAAP,KAAiBC,EAAjB,KACA,EAAoCxD,oBAAS,GAA7C,mBAAOF,EAAP,KAAoB2D,EAApB,KAPiC,4CASjC,4BAAAjD,EAAA,sEACgCjB,IADhC,OACQmE,EADR,OAGET,EAASS,GAHX,4CATiC,kEAqBjC,4BAAAlD,EAAA,6DACEtD,EAAenB,EAAO+B,MADxB,SAGIwF,GAAgB,GAHpB,SAIiC9D,EAAQ,OAACmC,QAAD,IAACA,OAAD,EAACA,EAAUpF,IAJpD,OAIUoH,EAJV,OAMIP,EAAaO,GANjB,gDAQIzG,EAAenB,EAAO6H,OAR1B,yBAUIN,GAAgB,GAVpB,6EArBiC,sBA0DjC,OARArC,qBAAU,YAlDuB,mCAmD/B4C,KACC,IAEH5C,qBAAU,YAtDuB,mCAuD/B6C,KACC,QAACnC,QAAD,IAACA,OAAD,EAACA,EAAUpF,KAGZ,sBAAMH,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEsF,MAAOA,EACPC,SAAUA,EACVC,iBArDS,SAACO,GACxBqB,EAAY,MACZC,GAAa,GACbP,EAAYf,QAsDF,sBAAK/F,UAAU,QAAQ,UAAQ,cAA/B,WACIuF,IAAa0B,GACb,mBAAG,UAAQ,iBAAX,8BAKDA,GAAkB,cAAC,EAAD,IAElBlG,IAAgBpB,EAAO6H,OACtB,qBACExH,UAAU,yBACV,UAAQ,oBAFV,SAIGe,EAAY,GAAGc,cACdd,EAAYe,MAAM,GAAGC,gBAIJ,KAAb,OAATgF,QAAS,IAATA,OAAA,EAAAA,EAAW7B,SACV,qBAAKlF,UAAU,0BAA0B,UAAQ,aAAjD,4BAIC+G,IAAsB,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAW7B,QAAS,GAClC,cAAC,EAAD,CACErF,MAAOkH,EACPjH,eAAuB,OAARqH,QAAQ,IAARA,OAAA,EAAAA,EAAUhH,KAAM,KAC/BJ,WAjEC,SAACG,GAClBmH,GAAa,GACbD,GAAY,SAAAO,GACV,OAAe,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAaxH,MAAOD,EAAKC,GACpB,KAGFD,gBAiEH,qBACE,UAAQ,UACRF,UAAWM,IACT,OACA,YACA,eACA,UACA,CAAE,kBAAmB6G,IAPzB,SAUE,qBAAKnH,UAAU,gCAAf,SACE,cAAC,EAAD,CACEE,KAAMiH,EACNpG,YAAaA,EACbD,eAAgBA,EAChB4C,YAAaA,EACbC,SA7EG,WACf0D,GAAa,kBC7DjBO,IAASC,OACP,cAAC,EAAD,IACAtB,SAASuB,eAAe,W","file":"static/js/main.a47f8872.chunk.js","sourcesContent":["export enum Errors {\n  Posts = 'SOMETHING WENT WRONG!',\n  Comments = 'SOMETHING WENT WRONG!',\n  Adding = 'UNABLE TO ADD COMMENT',\n  Deleting = 'UNABLE TO DELETE COMMENT',\n  Form = 'FORM IS NOT VALID',\n  None = '',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  openingPostId: number | null;\n  togglePost: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, openingPostId, togglePost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': openingPostId !== post.id },\n                )}\n                onClick={() => togglePost(post)}\n              >\n                {openingPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\nimport { Errors } from '../types/Errors';\n\ntype Props = {\n  newCommentsData: CommentData;\n  setNewCommentsData: (data: CommentData) => void;\n  addComment: () => void;\n  isCommentAdding: boolean;\n  setTypeOfError: (data: Errors) => void;\n  typeOfError: Errors;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  newCommentsData,\n  setNewCommentsData,\n  addComment,\n  isCommentAdding,\n  setTypeOfError,\n  typeOfError,\n}) => {\n  const inputCommentsName = (event: React.FormEvent<HTMLInputElement>) => {\n    const name = event.currentTarget.value;\n\n    setNewCommentsData({ ...newCommentsData, name });\n\n    if (newCommentsData.email !== ''\n    && newCommentsData.body !== '') {\n      setTypeOfError(Errors.None);\n    }\n  };\n\n  const inputCommentsEmail = (event: React.FormEvent<HTMLInputElement>) => {\n    const email = event.currentTarget.value;\n\n    setNewCommentsData({ ...newCommentsData, email });\n\n    if (newCommentsData.name !== ''\n    && newCommentsData.body !== '') {\n      setTypeOfError(Errors.None);\n    }\n  };\n\n  const inputCommentsBody = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const body = event.currentTarget.value;\n\n    setNewCommentsData({ ...newCommentsData, body });\n\n    if (newCommentsData.email !== ''\n    && newCommentsData.name !== '') {\n      setTypeOfError(Errors.None);\n    }\n  };\n\n  const handleAddClick = (event: React.FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    addComment();\n  };\n\n  const handleClearClick = () => {\n    setNewCommentsData({\n      ...newCommentsData,\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setTypeOfError(Errors.None);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': typeOfError === Errors.Form\n              && newCommentsData.name === '',\n              },\n            )}\n            value={newCommentsData.name}\n            onChange={inputCommentsName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          { typeOfError === Errors.Form && newCommentsData.name === '' && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {typeOfError === Errors.Form && newCommentsData.name === '' && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': typeOfError === Errors.Form\n              && newCommentsData.email === '',\n              },\n            )}\n            value={newCommentsData.email}\n            onChange={inputCommentsEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {typeOfError === Errors.Form && newCommentsData.email === '' && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {typeOfError === Errors.Form && newCommentsData.email === '' && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': typeOfError === Errors.Form\n              && newCommentsData.body === '',\n              },\n            )}\n            value={newCommentsData.body}\n            onChange={inputCommentsBody}\n          />\n        </div>\n\n        {typeOfError === Errors.Form && newCommentsData.body === '' && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentAdding },\n            )}\n            onClick={handleAddClick}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearClick}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      {typeOfError === Errors.Adding && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {typeOfError[0].toUpperCase() + typeOfError.slice(1).toLowerCase()}\n        </p>\n      )}\n    </form>\n  );\n};\n","import { CommentData } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: CommentData | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(\n    url: string, data: CommentData | null,\n  ) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number | null = null) => {\n  if (userId) {\n    return client.get<Post[]>(`/posts?userId=${userId}`);\n  }\n\n  return null;\n};\n\nexport const getComments = (postId: number | null = null) => {\n  if (postId) {\n    return client.get<Comment[]>(`/comments?postId=${postId}`);\n  }\n\n  return null;\n};\n\nexport const postComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Errors } from '../types/Errors';\n\nimport { getComments, postComment, deleteComment } from '../api/users';\n\ntype Props = {\n  post: Post | null;\n  isFormShown: boolean;\n  typeOfError: Errors;\n  setTypeOfError: (data: Errors) => void;\n  showForm: () => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  isFormShown,\n  showForm,\n  typeOfError,\n  setTypeOfError,\n}) => {\n  const [commentsList, setCommentsList] = useState<Comment[] | null>(null);\n  const [areCommentsLoading, setCommentsLoading] = useState(false);\n  const [isCommentAdding, setCommentAdding] = useState(false);\n  const [\n    removingCommentsId, setRemovingCommentsId,\n  ] = useState<number | null>(null);\n  const [newCommentsData, setNewCommentsData] = useState<CommentData>(\n    {\n      postId: post?.id || null,\n      name: '',\n      email: '',\n      body: '',\n    },\n  );\n\n  async function loadComments() {\n    setTypeOfError(Errors.None);\n    try {\n      setCommentsLoading(true);\n      const commentsFromServer = await getComments(post?.id);\n\n      setCommentsList(commentsFromServer);\n    } catch (error) {\n      setTypeOfError(Errors.Comments);\n    } finally {\n      setCommentsLoading(false);\n    }\n  }\n\n  const addComment = async () => {\n    setCommentAdding(false);\n    setTypeOfError(Errors.None);\n\n    if (newCommentsData.name === ''\n    || newCommentsData.email === ''\n    || newCommentsData.body === '') {\n      setTypeOfError(Errors.Form);\n\n      return;\n    }\n\n    try {\n      setCommentAdding(true);\n\n      const comment = await postComment(newCommentsData);\n\n      setCommentsList(currComments => {\n        if (currComments) {\n          return [...currComments, comment];\n        }\n\n        return [comment];\n      });\n\n      setNewCommentsData({ ...newCommentsData, body: '' });\n    } catch (error) {\n      setTypeOfError(Errors.Adding);\n    } finally {\n      setCommentAdding(false);\n    }\n  };\n\n  const removeComment = async (id: number) => {\n    setTypeOfError(Errors.None);\n    setRemovingCommentsId(null);\n    try {\n      await deleteComment(id);\n\n      setCommentsList(comments => {\n        return comments?.filter(comment => comment.id !== id) || null;\n      });\n    } catch (error) {\n      setTypeOfError(Errors.Deleting);\n      setRemovingCommentsId(id);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setNewCommentsData(\n      {\n        postId: post?.id || null,\n        name: '',\n        email: '',\n        body: '',\n      },\n    );\n  }, [post?.id]);\n\n  useEffect(() => {\n    let timer = 0;\n\n    if (typeOfError === Errors.Adding || typeOfError === Errors.Deleting) {\n      timer = window.setTimeout(() => {\n        setTypeOfError(Errors.None);\n        setRemovingCommentsId(null);\n      }, 3000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [typeOfError, setTypeOfError, setRemovingCommentsId]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #{post?.id}: {post?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {areCommentsLoading && <Loader />}\n\n          {typeOfError === Errors.Comments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {typeOfError[0].toUpperCase()\n              + typeOfError.slice(1).toLowerCase()}\n            </div>\n          )}\n\n          {commentsList?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!commentsList && commentsList?.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {commentsList?.map(comment => (\n                <React.Fragment key={comment.id}>\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n\n                  {typeOfError === Errors.Deleting\n                  && removingCommentsId === comment.id && (\n                    <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                      {typeOfError[0].toUpperCase()\n                      + typeOfError.slice(1).toLowerCase()}\n                    </p>\n                  )}\n                </React.Fragment>\n              ))}\n            </>\n          )}\n\n          {!isFormShown && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={showForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            newCommentsData={newCommentsData}\n            setNewCommentsData={setNewCommentsData}\n            addComment={addComment}\n            isCommentAdding={isCommentAdding}\n            setTypeOfError={setTypeOfError}\n            typeOfError={typeOfError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect, useState, useRef, useCallback,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null;\n  currUser: User | null;\n  handleUserSelect: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, currUser, handleUserSelect,\n}) => {\n  const [isListShown, setListShown] = useState(false);\n  const ulRef = useRef<HTMLUListElement | null>(null);\n\n  const toggleList = () => {\n    setListShown(!isListShown);\n  };\n\n  const handleUserClick = (user: User) => () => {\n    handleUserSelect(user);\n    toggleList();\n  };\n\n  const handleClick = useCallback(({ target }: MouseEvent) => {\n    const node = ulRef?.current;\n\n    if (node && target instanceof Node && !node.contains(target)) {\n      setListShown(false);\n    }\n  }, [isListShown, ulRef]);\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClick);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, [handleClick]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleList}\n        >\n          {!currUser && <span>Choose a user</span>}\n          {!!currUser && <span>{currUser.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isListShown && (\n        <ul\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n          ref={ulRef}\n        >\n          {users?.map(user => (\n            <li key={user.id} className=\"dropdown-content\">\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': currUser?.id === user.id },\n                )}\n                onClick={handleUserClick(user)}\n              >\n                {user.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport {\n  getUsers, getPosts,\n} from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Errors } from './types/Errors';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [currUser, setCurrUser] = useState<User | null>(null);\n  const [postsList, setPostsList] = useState<Post[] | null>(null);\n  const [typeOfError, setTypeOfError] = useState<Errors>(Errors.None);\n  const [isPostsLoading, setPostsLoading] = useState(false);\n  const [currPost, setCurrPost] = useState<Post | null>(null);\n  const [isFormShown, setFormShown] = useState(false);\n\n  async function getUserList() {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer);\n  }\n\n  const handleUserSelect = (user: User) => {\n    setCurrPost(null);\n    setFormShown(false);\n    setCurrUser(user);\n  };\n\n  async function loadUserPosts() {\n    setTypeOfError(Errors.None);\n    try {\n      setPostsLoading(true);\n      const postFromServer = await getPosts(currUser?.id);\n\n      setPostsList(postFromServer);\n    } catch (error) {\n      setTypeOfError(Errors.Posts);\n    } finally {\n      setPostsLoading(false);\n    }\n  }\n\n  const togglePost = (post: Post) => {\n    setFormShown(false);\n    setCurrPost(currentPost => {\n      if (currentPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n  };\n\n  const showForm = () => {\n    setFormShown(true);\n  };\n\n  useEffect(() => {\n    getUserList();\n  }, []);\n\n  useEffect(() => {\n    loadUserPosts();\n  }, [currUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  currUser={currUser}\n                  handleUserSelect={handleUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!currUser && !isPostsLoading && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {typeOfError === Errors.Posts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {typeOfError[0].toUpperCase()\n                    + typeOfError.slice(1).toLowerCase()}\n                  </div>\n                )}\n\n                {postsList?.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {!!postsList && postsList?.length > 0 && (\n                  <PostsList\n                    posts={postsList}\n                    openingPostId={currPost?.id || null}\n                    togglePost={togglePost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!currPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                post={currPost}\n                typeOfError={typeOfError}\n                setTypeOfError={setTypeOfError}\n                isFormShown={isFormShown}\n                showForm={showForm}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}